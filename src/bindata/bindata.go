package bindata

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_config_yaml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0xca, 0xc8,
		0xcf, 0x4d, 0xb5, 0x52, 0xd0, 0x4f, 0x4f, 0x4e, 0x4c, 0xce, 0x48, 0x85,
		0x51, 0x5c, 0x45, 0xa9, 0x29, 0x99, 0xc5, 0x56, 0x5c, 0x0a, 0x40, 0x90,
		0x98, 0x12, 0x9f, 0x99, 0x97, 0x92, 0x5a, 0x11, 0x9f, 0x9b, 0x58, 0x5c,
		0x92, 0x5a, 0x04, 0x11, 0x04, 0x81, 0xe2, 0xd4, 0xa2, 0x32, 0x20, 0x5f,
		0x41, 0x3d, 0x27, 0x3f, 0x39, 0x31, 0x27, 0x23, 0xbf, 0xb8, 0xc4, 0xca,
		0xcc, 0xd8, 0xdc, 0x52, 0x1d, 0xae, 0xa0, 0x28, 0x35, 0x39, 0x3f, 0x2f,
		0x2f, 0x35, 0xb9, 0xc4, 0x4a, 0xc1, 0xd0, 0x80, 0x0b, 0x10, 0x00, 0x00,
		0xff, 0xff, 0xe8, 0xd4, 0x19, 0x03, 0x69, 0x00, 0x00, 0x00,
		},
		"data/config.yaml",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/config.yaml": data_config_yaml,

}
