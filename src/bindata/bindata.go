package bindata

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_config_yaml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x3c, 0xcb,
		0xcf, 0x0a, 0xc2, 0x30, 0x0c, 0xc7, 0xf1, 0x7b, 0x9f, 0x22, 0xb7, 0x1e,
		0xad, 0x0c, 0xfc, 0x93, 0x97, 0x19, 0x25, 0xfd, 0x61, 0x07, 0x5b, 0x33,
		0xd2, 0x2a, 0x3e, 0xbe, 0xd3, 0x52, 0xbf, 0x97, 0x90, 0x0f, 0x49, 0xd6,
		0x0d, 0x4c, 0xa7, 0x87, 0x44, 0xc9, 0x18, 0xc3, 0xed, 0x6a, 0x8d, 0x1d,
		0x1d, 0x75, 0x61, 0xf2, 0x53, 0x08, 0xc1, 0x77, 0x32, 0x7d, 0xee, 0x83,
		0x6f, 0x3f, 0x36, 0xa4, 0xa5, 0xf6, 0x87, 0x98, 0xe6, 0xa5, 0x24, 0xbc,
		0xe7, 0x2d, 0xd6, 0x06, 0xeb, 0xf8, 0xad, 0xc2, 0x5e, 0xc7, 0x4e, 0x7e,
		0x55, 0x89, 0x6b, 0xd6, 0xda, 0xf8, 0x32, 0x5d, 0xef, 0xfe, 0x7f, 0x60,
		0x10, 0x2d, 0x05, 0xd2, 0x98, 0xce, 0xc1, 0x7d, 0x02, 0x00, 0x00, 0xff,
		0xff, 0x51, 0x7e, 0x80, 0xdb, 0x99, 0x00, 0x00, 0x00,
		},
		"data/config.yaml",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/config.yaml": data_config_yaml,

}
