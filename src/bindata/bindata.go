package bindata

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_config_yaml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x3c, 0xcb,
		0x4d, 0x0e, 0xc2, 0x40, 0x08, 0x05, 0xe0, 0xfd, 0x9c, 0x82, 0xdd, 0x2c,
		0xc5, 0x34, 0xf1, 0x87, 0xdb, 0x4c, 0x90, 0x38, 0x26, 0x6d, 0x69, 0x00,
		0x3d, 0xbf, 0x55, 0x32, 0x7d, 0x1b, 0xe0, 0x0b, 0xaf, 0xeb, 0x22, 0x04,
		0xa7, 0x27, 0x37, 0xee, 0x32, 0x46, 0xd9, 0xd4, 0x82, 0x0a, 0xec, 0x49,
		0x21, 0xa8, 0x13, 0x22, 0xd6, 0x24, 0xd3, 0xf7, 0x36, 0xf8, 0xf6, 0x67,
		0x93, 0xc7, 0xcb, 0xb3, 0xb0, 0x34, 0x0f, 0xb1, 0xdc, 0x7f, 0x71, 0xb1,
		0xcf, 0x7e, 0x43, 0x9d, 0x95, 0xdb, 0xdc, 0xd5, 0x83, 0x2e, 0xd3, 0xf5,
		0x5e, 0x8f, 0x07, 0x13, 0xd6, 0x75, 0x15, 0x0e, 0x82, 0x33, 0x96, 0x6f,
		0x00, 0x00, 0x00, 0xff, 0xff, 0x6c, 0x2e, 0x0b, 0x63, 0x90, 0x00, 0x00,
		0x00,
		},
		"data/config.yaml",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/config.yaml": data_config_yaml,

}
