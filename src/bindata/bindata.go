package bindata

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_config_yaml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x2a, 0x4a,
		0x4d, 0xc9, 0x2c, 0xb6, 0xe2, 0x52, 0x00, 0x82, 0xc4, 0x94, 0xf8, 0xcc,
		0xbc, 0x94, 0xd4, 0x8a, 0xf8, 0xdc, 0xc4, 0xe2, 0x92, 0xd4, 0x22, 0x88,
		0x20, 0x08, 0x14, 0xa7, 0x16, 0x95, 0x01, 0xf9, 0x0a, 0xea, 0x39, 0xf9,
		0xc9, 0x89, 0x39, 0x19, 0xf9, 0xc5, 0x25, 0x56, 0x66, 0xc6, 0xe6, 0x96,
		0xea, 0x70, 0x05, 0x45, 0xa9, 0xc9, 0xf9, 0x79, 0x79, 0xa9, 0xc9, 0x25,
		0x56, 0x0a, 0x86, 0x06, 0x5c, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5b,
		0x86, 0xe0, 0x6b, 0x53, 0x00, 0x00, 0x00,
		},
		"data/config.yaml",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/config.yaml": data_config_yaml,

}
