package bindata

import (
    "bytes"
    "compress/gzip"
    "fmt"
    "io"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

func data_config_yaml() ([]byte, error) {
	return bindata_read([]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x00, 0xff, 0x3c, 0xcc,
		0xd1, 0xce, 0xc2, 0x20, 0x0c, 0x05, 0xe0, 0x7b, 0x9e, 0xa2, 0x77, 0x5c,
		0xfe, 0xfc, 0x99, 0xd9, 0x1c, 0x6f, 0x83, 0xf5, 0x44, 0x96, 0xc0, 0xba,
		0x14, 0xf4, 0xf9, 0xad, 0xa2, 0x9e, 0x1b, 0xe8, 0x97, 0xf6, 0x64, 0xa9,
		0x88, 0xf4, 0x77, 0xe3, 0xc4, 0x19, 0xdf, 0xc7, 0x1d, 0xa2, 0x3d, 0x3a,
		0xb2, 0x0c, 0x89, 0xe4, 0xa7, 0x10, 0x82, 0x1f, 0xa4, 0x72, 0x3f, 0x3e,
		0x7c, 0x36, 0x7d, 0x63, 0x45, 0xbd, 0x40, 0xcb, 0xd6, 0x7a, 0xa4, 0x65,
		0x3d, 0xcd, 0x4e, 0x71, 0xdd, 0xda, 0xe8, 0xa8, 0xa9, 0x75, 0xe8, 0xf8,
		0xbf, 0xd2, 0xa0, 0x0f, 0x9b, 0xc9, 0x17, 0xe1, 0x54, 0xb2, 0xd8, 0xcd,
		0x3c, 0x2d, 0xab, 0xff, 0x2d, 0x28, 0x58, 0xf6, 0x1d, 0x6c, 0x5d, 0xff,
		0xc1, 0x3d, 0x03, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x08, 0x5d, 0xbc, 0xa3,
		0x00, 0x00, 0x00,
		},
		"data/config.yaml",
	)
}


// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	if f, ok := _bindata[name]; ok {
		return f()
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string] func() ([]byte, error) {
	"data/config.yaml": data_config_yaml,

}
